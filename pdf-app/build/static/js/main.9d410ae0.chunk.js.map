{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","readfiles","event","a","fileList","fileInput","current","files","console","log","length","i","setState","state","images","imgDataUrl","window","URL","createObjectURL","file","createPdf","mime","PDFDocument","create","pdfDoc","fetch","res","arrayBuffer","raw","headers","get","embedJpg","embedPng","img","page","addPage","drawImage","x","y","width","getWidth","height","getHeight","save","pdfBytes","blob","Blob","type","open","error","lastError","lastMime","undefined","React","createRef","style","display","flexWrap","this","map","index","flexDirection","src","alt","ref","onChange","multiple","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d410ae0.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport { PDFDocument } from 'pdf-lib'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: [],\n      lastError:undefined,\n      lastMime:undefined\n    };\n    this.fileInput = React.createRef();\n  }\n  render() {\n    return (\n      <div>\n        <div>This app is not styled yet</div>\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n          {this.state.images.map((img, index) => (\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n              <img src={img.imgDataUrl} alt=\"\" style={{ width: \"96px\", height: \"128px\" }}></img>\n              <div>{\"Page \" + (index + 1)}</div>\n            </div>\n          ))}\n        </div>\n        <div>\n          <input type=\"file\" ref={this.fileInput} onChange={this.readfiles} multiple></input>\n          <button onClick={() => { this.setState({ images: [] }) }}>Clear</button>\n          <button onClick={this.createPdf}>Generate PDF</button>\n        </div>\n        {this.state.lastError?\n        <div>\n          <div>{this.state.lastError}</div>\n          <div>{this.state.lastMime}</div>\n        </div>:<div>{this.state.lastMime}</div>}\n        <div>{this.state.lastMime}</div>\n      </div>);\n  }\n\n  //https://labs.madisoft.it/javascript-image-compression-and-resizing/\n  /* resizeImage = async (file, width, height) => {\n    const blobURL = window.URL.createObjectURL(file);\n    const img = new Image();\n    img.src = blobURL;\n    img.onload = function (ev) {\n      window.URL.revokeObjectURL(blobURL); // release memory\n      // Use the img\n      const canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, width, height);\n    };\n\n  } */\n\n  readfiles = async (event) => {\n    let fileList = this.fileInput.current.files;\n    console.log(fileList.length);\n    for (let i = 0; i < fileList.length; i++) {\n      this.setState((state) => ({\n        images: [...state.images, { imgDataUrl: window.URL.createObjectURL(fileList[i]), file: fileList[i] }]\n      }));\n    }\n  }\n\n  createPdf = async () => {\n    \n    let mime=\"\";\n    try {\n      const pdfDoc = await PDFDocument.create();\n      for (let i = 0; i < this.state.images.length; i++) {\n        let res=await fetch(this.state.images[i].imgDataUrl);\n        \n        let raw = await res.arrayBuffer();\n        mime=res.headers.get('content-type');\n        console.log(res.headers.get('content-type'));\n        //console.log(raw);\n        const img = await (res.headers.get('content-type')==='image/jpeg'?pdfDoc.embedJpg(raw):pdfDoc.embedPng(raw));\n        const page = pdfDoc.addPage();\n        page.drawImage(img, {\n          x: 0,\n          y: 0,\n          width: page.getWidth(),\n          height: page.getHeight(),\n        });\n      }\n      const pdfBytes = await pdfDoc.save();\n      let blob = new Blob([pdfBytes], { type: \"application/pdf\" });\n      window.open(window.URL.createObjectURL(blob));\n      // let link = document.createElement('a');\n      // link.href = window.URL.createObjectURL(blob);\n      // let fileName = \"file.pdf\";\n      // link.download = fileName;\n      // link.click();\n    }\n    catch (err) {\n      console.error(err);\n      this.setState({lastError:err,lastMime:mime});\n    }\n  }\n\n  /* createPdf = async () => {\n    const pdfDoc = await PDFDocument.create();\n    this.createPage(pdfDoc, 1);\n  }\n\n  createPage = (pdfDoc, index) => {\n    this.embedImage(pdfDoc, index).then(() => {\n      if (index > this.state.images.length) {\n        pdfDoc.save().then((blob) => {\n          var link = document.createElement('a');\n          link.href = window.URL.createObjectURL(blob);\n          var fileName = \"file.pdf\";\n          link.download = fileName;\n          link.click();\n        });\n      }\n      this.createPage(pdfDoc, index + 1);\n    });\n  }\n\n  embedImage = async (pdfDoc, index) => {\n    if (index > this.state.images.length) return;\n    let raw = await (await fetch(this.state.images[index - 1])).blob();\n    const img = await pdfDoc.embedJpg(raw);\n    const page = pdfDoc.addPage();\n    page.drawImage(img, {\n      x: 0,\n      y: 0,\n      width: page.getWidth(),\n      height: page.getHeight(),\n    });\n  } */\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}